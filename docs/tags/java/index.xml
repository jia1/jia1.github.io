<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Jiayee.net</title>
    <link>https://jiayee.net/tags/java/</link>
    <description>Recent content in java on Jiayee.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Tue, 17 Nov 2020 21:30:00 +0800</lastBuildDate><atom:link href="https://jiayee.net/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Abstract classes and AOP</title>
      <link>https://jiayee.net/2020/11/abstract-classes-and-aop/</link>
      <pubDate>Tue, 17 Nov 2020 21:30:00 +0800</pubDate>
      
      <guid>https://jiayee.net/2020/11/abstract-classes-and-aop/</guid>
      <description>I wanted to avoid writing boilerplate code for CRUD in Spring Boot. But I failed - I could not make my child aspect get along with my child controller. Before adopting AOP, I had an abstract controller which the child controller inherited. CRUD worked well and I no longer needed to repeat the code for simple CRUD anymore. I was happy.
// MyAbstractController public abstract class MyAbstractController&amp;lt;T extends UniversalModel&amp;gt; { private final .</description>
    </item>
    
    <item>
      <title>Iterator to Stream</title>
      <link>https://jiayee.net/tweets/iterator-to-stream/</link>
      <pubDate>Wed, 11 Nov 2020 19:38:00 +0800</pubDate>
      
      <guid>https://jiayee.net/tweets/iterator-to-stream/</guid>
      <description>With Google Guava, you can transform an Iterator into a Stream with Streams.stream(...). But that API is only available from Guava 21. If you don&amp;rsquo;t want to use Guava or if your Guava version is below 21, you need an additional step to convert your Iterator to a Stream:
Stream&amp;lt;String&amp;gt; stream = StreamSupport.stream( Spliterators.spliteratorUnknownSize( iterator, Spliterator.ORDERED ), false ); Reference: mkyong.</description>
    </item>
    
    <item>
      <title>No qualifying bean</title>
      <link>https://jiayee.net/2020/09/no-qualifying-bean/</link>
      <pubDate>Thu, 17 Sep 2020 15:23:00 +0800</pubDate>
      
      <guid>https://jiayee.net/2020/09/no-qualifying-bean/</guid>
      <description>In one of my previous posts, I avoided auto-configuring primitives. Otherwise, the No qualifying bean error will occur. Today, I couldn&amp;rsquo;t avoid that anymore. I had to auto-configure a boolean so that the consumer can enable or disable a feature in application.yml.
So, how did I resolve this issue? I used @Value(&amp;quot;{someKey:someDefault}&amp;quot;) final boolean someFlag in the caller constructor.
Before that, I tried attaching only @Bean to the getter, but it didn&amp;rsquo;t work out.</description>
    </item>
    
    <item>
      <title>Almost done with the custom starter</title>
      <link>https://jiayee.net/2020/09/almost-done-with-the-custom-starter/</link>
      <pubDate>Wed, 09 Sep 2020 12:18:00 +0800</pubDate>
      
      <guid>https://jiayee.net/2020/09/almost-done-with-the-custom-starter/</guid>
      <description>I was right. I forgot to enable the Mongo repository. And it wasn&amp;rsquo;t only that. I had two Mongo configuration classes. One in the consumer and another in the custom starter. I needed only one. I removed the configuration class from the custom starter. Then, I enabled the custom starter&amp;rsquo;s repository in the consumer&amp;rsquo;s configuration class. Below is an idea of how my configuration class looks like:
@EnableMongoRepositories(basePackages = { &amp;#34;yourTLD.</description>
    </item>
    
    <item>
      <title>Auto-configuring controllers and repositories</title>
      <link>https://jiayee.net/2020/09/auto-configuring-controllers-and-repositories/</link>
      <pubDate>Tue, 08 Sep 2020 21:01:00 +0800</pubDate>
      
      <guid>https://jiayee.net/2020/09/auto-configuring-controllers-and-repositories/</guid>
      <description>I auto-configured Spring Boot REST controllers by adding their names to the spring.factories file. On the other hand, I did not have much luck with auto-configuring Mongo collections (yet).
I then ran the consumer&amp;rsquo;s codebase and used Postman to hit the newly-offered endpoints. Below is the response seen in Postman:
{ &amp;#34;error&amp;#34;: { &amp;#34;IllegalArgumentException&amp;#34;: &amp;#34;Couldn&amp;#39;t find PersistentEntity for type class yourTLD.yourOrg.yourProject.somePackage.SomeModel!&amp;#34; } } I thought the Mongo repository was not auto-configured, so I went to check the consumer&amp;rsquo;s logs.</description>
    </item>
    
    <item>
      <title>Spring Boot Auto-configuration</title>
      <link>https://jiayee.net/2020/09/spring-boot-auto-configuration/</link>
      <pubDate>Mon, 07 Sep 2020 20:22:00 +0800</pubDate>
      
      <guid>https://jiayee.net/2020/09/spring-boot-auto-configuration/</guid>
      <description>Every time I use Spring Security, I have to copy and paste a lot of boilerplate code. What if I made the boilerplate code configurable? I decided to venture into this idea.
At first, I extracted only the method body which configures HttpSecurity. So I got myself something like a utility library. But this meant there was still some boilerplate code outside of the library. This approach required consumers to define their own configuration classes (annotated with @Configuration).</description>
    </item>
    
  </channel>
</rss>
