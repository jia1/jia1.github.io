<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>library on Jiayee.net</title>
    <link>https://jiayee.net/tags/library/</link>
    <description>Recent content in library on Jiayee.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Thu, 10 Sep 2020 23:59:00 +0800</lastBuildDate><atom:link href="https://jiayee.net/tags/library/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>My first yarn package</title>
      <link>https://jiayee.net/2020/09/my-first-yarn-package/</link>
      <pubDate>Thu, 10 Sep 2020 23:59:00 +0800</pubDate>
      
      <guid>https://jiayee.net/2020/09/my-first-yarn-package/</guid>
      <description>I wrote my first yarn package (kind of for fun) yesterday. It&amp;rsquo;s strange how I&amp;rsquo;ve been consuming packages but never went to the other side of the table: Writing a package. As of now, I haven&amp;rsquo;t published my package, but I&amp;rsquo;m omw. So, how did I create a package? It just felt like the usual&amp;hellip; I followed the yarn docs.
One difference (compared to my usual activities) was I couldn&amp;rsquo;t do import { .</description>
    </item>
    
    <item>
      <title>Almost done with the custom starter</title>
      <link>https://jiayee.net/2020/09/almost-done-with-the-custom-starter/</link>
      <pubDate>Wed, 09 Sep 2020 12:18:00 +0800</pubDate>
      
      <guid>https://jiayee.net/2020/09/almost-done-with-the-custom-starter/</guid>
      <description>I was right. I forgot to enable the Mongo repository. And it wasn&amp;rsquo;t only that. I had two Mongo configuration classes. One in the consumer and another in the custom starter. I needed only one. I removed the configuration class from the custom starter. Then, I enabled the custom starter&amp;rsquo;s repository in the consumer&amp;rsquo;s configuration class. Below is an idea of how my configuration class looks like:
@EnableMongoRepositories(basePackages = {  &amp;#34;yourTLD.</description>
    </item>
    
    <item>
      <title>Auto-configuring controllers and repositories</title>
      <link>https://jiayee.net/2020/09/auto-configuring-controllers-and-repositories/</link>
      <pubDate>Tue, 08 Sep 2020 21:01:00 +0800</pubDate>
      
      <guid>https://jiayee.net/2020/09/auto-configuring-controllers-and-repositories/</guid>
      <description>I auto-configured Spring Boot REST controllers by adding their names to the spring.factories file. On the other hand, I did not have much luck with auto-configuring Mongo collections (yet).
I then ran the consumer&amp;rsquo;s codebase and used Postman to hit the newly-offered endpoints. Below is the response seen in Postman:
{  &amp;#34;error&amp;#34;: {  &amp;#34;IllegalArgumentException&amp;#34;: &amp;#34;Couldn&amp;#39;t find PersistentEntity for type class yourTLD.yourOrg.yourProject.somePackage.SomeModel!&amp;#34;  } } I thought the Mongo repository was not auto-configured, so I went to check the consumer&amp;rsquo;s logs.</description>
    </item>
    
    <item>
      <title>Spring Boot Auto-configuration</title>
      <link>https://jiayee.net/2020/09/spring-boot-auto-configuration/</link>
      <pubDate>Mon, 07 Sep 2020 20:22:00 +0800</pubDate>
      
      <guid>https://jiayee.net/2020/09/spring-boot-auto-configuration/</guid>
      <description>Every time I use Spring Security, I have to copy and paste a lot of boilerplate code. What if I made the boilerplate code configurable? I decided to venture into this idea.
At first, I extracted only the method body which configures HttpSecurity. So I got myself something like a utility library. But this meant there was still some boilerplate code outside of the library. This approach required consumers to define their own configuration classes (annotated with @Configuration).</description>
    </item>
    
  </channel>
</rss>
