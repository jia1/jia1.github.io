<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spring on Jiayee.net</title>
    <link>https://jiayee.net/tags/spring/</link>
    <description>Recent content in spring on Jiayee.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Thu, 17 Sep 2020 15:23:25 +0800</lastBuildDate>
    
	<atom:link href="https://jiayee.net/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>No qualifying bean</title>
      <link>https://jiayee.net/2020/09/no-qualifying-bean/</link>
      <pubDate>Thu, 17 Sep 2020 15:23:25 +0800</pubDate>
      
      <guid>https://jiayee.net/2020/09/no-qualifying-bean/</guid>
      <description>In one of my previous posts, I avoided auto-configuring primitives because it would cause the No qualifying bean error. Today, I couldn&amp;rsquo;t avoid that anymore. I had to auto-configure a boolean so that the consumer of the custom starter can simply enable or disable a feature with a boolean config in application.yml.
So, how did I resolve this issue? Instead of placing the primitive config in the configuration class, I simply used @Value(&amp;quot;{someKey:someDefault}&amp;quot;) final boolean someFlag in the constructor where the configuration was required.</description>
    </item>
    
    <item>
      <title>Almost done with the custom starter</title>
      <link>https://jiayee.net/2020/09/almost-done-with-the-custom-starter/</link>
      <pubDate>Wed, 09 Sep 2020 12:18:40 +0800</pubDate>
      
      <guid>https://jiayee.net/2020/09/almost-done-with-the-custom-starter/</guid>
      <description>I was right. I forgot to enable the Mongo repository. And it wasn&amp;rsquo;t only that. I had two Mongo configuration classes. One in the consumer and another in the custom starter. I needed only one. I removed the Mongo configuration class from the custom starter. Then, I enabled the Mongo repository from the custom starter in the consumer&amp;rsquo;s Mongo configuration class. Below is an idea on how my Mongo configuration class looks like:</description>
    </item>
    
    <item>
      <title>Auto-configuring controllers and repositories</title>
      <link>https://jiayee.net/2020/09/auto-configuring-controllers-and-repositories/</link>
      <pubDate>Tue, 08 Sep 2020 21:01:00 +0800</pubDate>
      
      <guid>https://jiayee.net/2020/09/auto-configuring-controllers-and-repositories/</guid>
      <description>I managed to auto-configure Spring Boot REST controllers just by adding their names to the spring.factories file. On the other hand, I did not have much luck with auto-configuring Mongo collections (yet).
After auto-configuring the controllers, I ran the consumer&amp;rsquo;s codebase locally and used Postman to hit the newly-offered endpoints. Below is the response seen in Postman:
{ &amp;#34;error&amp;#34;: { &amp;#34;IllegalArgumentException&amp;#34;: &amp;#34;Couldn&amp;#39;t find PersistentEntity for type class yourTLD.yourOrg.yourProject.somePackage.SomeModel!&amp;#34; } } I thought the Mongo repository was not auto-configured, so I went to check the consumer&amp;rsquo;s logs.</description>
    </item>
    
    <item>
      <title>Spring Boot Auto-configuration</title>
      <link>https://jiayee.net/2020/09/spring-boot-auto-configuration/</link>
      <pubDate>Mon, 07 Sep 2020 20:22:00 +0800</pubDate>
      
      <guid>https://jiayee.net/2020/09/spring-boot-auto-configuration/</guid>
      <description>My team at Indeed has more than one project which needs to be secured by Spring Security. Currently, we have a project which is secured. My tech lead suggested extracting the code which interacts with Spring Security into a library. I decided to venture into this idea.
At first, I extracted just the body of the method which configures Spring Security&amp;rsquo;s HttpSecurity and anything else which did not require any configuration.</description>
    </item>
    
  </channel>
</rss>