<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>typescript on Jiayee.net</title>
    <link>https://jiayee.net/tags/typescript/</link>
    <description>Recent content in typescript on Jiayee.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sun, 26 Mar 2023 21:06:00 +0800</lastBuildDate><atom:link href="https://jiayee.net/tags/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reuse Stories When Testing</title>
      <link>https://jiayee.net/2023/03/reuse-stories-when-testing/</link>
      <pubDate>Sun, 26 Mar 2023 21:06:00 +0800</pubDate>
      
      <guid>https://jiayee.net/2023/03/reuse-stories-when-testing/</guid>
      <description>My volunteering experience at an open source project led me to appreciate Storybook. Developing frontend components in isolation makes me happy. Unexpected behaviour is localised, and you are appropriately enticed to write your components better. By better, I meant modular. Modularity encourages simplicity (think SRP), and this makes code more reusable and self-documenting. There&amp;rsquo;s no greater joy than not having to explain your code.
But wait, there&amp;rsquo;s more: If you think writing stories is exclusive to your Storybook instance and thus a pain to write, think again.</description>
    </item>
    
    <item>
      <title>redux-persist</title>
      <link>https://jiayee.net/2020/10/redux-persist/</link>
      <pubDate>Thu, 08 Oct 2020 22:36:00 +0800</pubDate>
      
      <guid>https://jiayee.net/2020/10/redux-persist/</guid>
      <description>If you need your Redux store to last beyond a page load or refresh, look no further! redux-persist is here to the rescue. Based on this guide and this guide, you need to update your reducers and store to enjoy persistence:
Install redux-persist:
yarn add redux-persist @types/redux-persist Update root reducer and store:
// Copied from the official README and edited import { Provider } from &amp;#39;react-redux&amp;#39;; import { createStore, Store } from &amp;#39;redux&amp;#39;; import { persistReducer, persistStore } from &amp;#39;redux-persist&amp;#39;; import storage from &amp;#39;redux-persist/lib/storage&amp;#39;; import rootReducer from &amp;#39;.</description>
    </item>
    
    <item>
      <title>String.format equivalent in TypeScript</title>
      <link>https://jiayee.net/2020/10/string.format-equivalent-in-typescript/</link>
      <pubDate>Wed, 07 Oct 2020 22:50:00 +0800</pubDate>
      
      <guid>https://jiayee.net/2020/10/string.format-equivalent-in-typescript/</guid>
      <description>While working on a problem during work, I thought I needed a way to do a String.format equivalent operation in TypeScript (it turns out I didn&amp;rsquo;t need to). I didn&amp;rsquo;t want to install Lodash (50 kB for _.template alone) or sprintf (40 kB), so I came up with the following:
// Warning: Untested code export const compileTemplate = (template: string, values: Map&amp;lt;string, string&amp;gt;) =&amp;gt; { const variables = Array.from(values.keys()).map(key =&amp;gt; &amp;#39;:&amp;#39; + key).</description>
    </item>
    
    <item>
      <title>TypeScript Shortcuts</title>
      <link>https://jiayee.net/2020/10/typescript-shortcuts/</link>
      <pubDate>Thu, 01 Oct 2020 19:01:00 +0800</pubDate>
      
      <guid>https://jiayee.net/2020/10/typescript-shortcuts/</guid>
      <description>TL;DR: I learnt how to (invert a map) and (copy a map and override the values of the copy) in TypeScript. Ctrl+F TYPESCRIPT_SHORTCUT_1 and TYPESCRIPT_SHORTCUT_2 to get to the code.
Context: Yesterday, I did not invest time into inverting a TypeScript Map&amp;lt;string, string&amp;gt;. Today, I received feedback that I should extract the encode logic into a function of its own. I decided to put in more effort.
Here&amp;rsquo;s the new original code:</description>
    </item>
    
    <item>
      <title>CryptoJS and URL</title>
      <link>https://jiayee.net/2020/09/cryptojs-and-url/</link>
      <pubDate>Wed, 30 Sep 2020 19:17:00 +0800</pubDate>
      
      <guid>https://jiayee.net/2020/09/cryptojs-and-url/</guid>
      <description>Like this Stack Overflow thread, I needed to encrypt some string which will become part of a URL. However, there was a slash in one of the encrypted strings, like c3ViamVjdHM/X2Q9MQ==. Feel free to decode this. It&amp;rsquo;s something I copied from the internet.
I thought there would be a lot of symbols in the Base64 alphabet at first (I was wrong). I didn&amp;rsquo;t want to deal with them and set up a giant substitution map, like a Map&amp;lt;string, string&amp;gt;.</description>
    </item>
    
    <item>
      <title>Rule: no-var-requires</title>
      <link>https://jiayee.net/tweets/no-var-requires/</link>
      <pubDate>Sun, 13 Sep 2020 22:12:00 +0800</pubDate>
      
      <guid>https://jiayee.net/tweets/no-var-requires/</guid>
      <description>My pre-commit hook complained because the original code had an import that looked like var module = require(&amp;quot;module&amp;quot;). The permitted ways to import are: import foo = require(&#39;foo&#39;) and &amp;ldquo;ES2015-style imports&amp;rdquo; which (I think) is defined in this part of the MDN web docs. I wonder when this rule was inserted&amp;hellip;</description>
    </item>
    
  </channel>
</rss>
