<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>web on Jiayee.net</title>
    <link>https://jiayee.net/tags/web/</link>
    <description>Recent content in web on Jiayee.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Wed, 14 Oct 2020 18:04:00 +0800</lastBuildDate>
    
	<atom:link href="https://jiayee.net/tags/web/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Center</title>
      <link>https://jiayee.net/2020/10/center/</link>
      <pubDate>Wed, 14 Oct 2020 18:04:00 +0800</pubDate>
      
      <guid>https://jiayee.net/2020/10/center/</guid>
      <description>Why &amp;ldquo;Center&amp;rdquo; instead of &amp;ldquo;Centre&amp;rdquo;? Well, that&amp;rsquo;s because &amp;ldquo;center&amp;rdquo; is the version used in CSS.
There were moments in my life when I wanted to give up writing in British English. There are so many other people using American English&amp;hellip; except for me. Programming languages are expressed using American English as well. I felt like a rebel for naming my variables in British English, but that&amp;rsquo;s what I&amp;rsquo;ve learnt in school.</description>
    </item>
    
    <item>
      <title>redux-persist</title>
      <link>https://jiayee.net/2020/10/redux-persist/</link>
      <pubDate>Thu, 08 Oct 2020 22:36:00 +0800</pubDate>
      
      <guid>https://jiayee.net/2020/10/redux-persist/</guid>
      <description>If you need your Redux store to last beyond a page load or refresh, look no further! redux-persist is here to the rescue. Based on this guide and this guide, you need to update your reducers and store to enjoy persistence:
Install redux-persist:
yarn add redux-persist @types/redux-persist Update root reducer and store:
// Copied from the official README and edited import { Provider } from &amp;#39;react-redux&amp;#39;; import { createStore, Store } from &amp;#39;redux&amp;#39;; import { persistReducer, persistStore } from &amp;#39;redux-persist&amp;#39;; import storage from &amp;#39;redux-persist/lib/storage&amp;#39;; import rootReducer from &amp;#39;.</description>
    </item>
    
    <item>
      <title>Challenges of a multi-step flow with permalinks</title>
      <link>https://jiayee.net/2020/10/challenges-of-a-multi-step-flow-with-permalinks/</link>
      <pubDate>Wed, 07 Oct 2020 22:50:28 +0800</pubDate>
      
      <guid>https://jiayee.net/2020/10/challenges-of-a-multi-step-flow-with-permalinks/</guid>
      <description>I decided to invest my time into covering the edge cases that were not handled by Design #1. Refer to yesterday&amp;rsquo;s post for the context. The edge cases are:
 Forms which need data from the preceding forms Dynamic form links  I can deal with the first pain point by leveraging query parameters. A persistent Redux store is not needed (yet). A persistent Redux store is one which persists between page loads and refreshes.</description>
    </item>
    
    <item>
      <title>Multi-step forms</title>
      <link>https://jiayee.net/2020/10/multi-step-forms/</link>
      <pubDate>Tue, 06 Oct 2020 21:48:00 +0800</pubDate>
      
      <guid>https://jiayee.net/2020/10/multi-step-forms/</guid>
      <description>I have a few pages which I need to chain into a single form flow. I also need to display a progress bar at the top of each form. I need to do some rearchitecting. Reasons:
 If we do not do anything, we will need to insert &amp;lt;ProgressBar .../&amp;gt; and the like into every form component. Sharing the forms/pages across other flows which do not need to progress bar is difficult.</description>
    </item>
    
    <item>
      <title>Polling</title>
      <link>https://jiayee.net/2020/10/polling/</link>
      <pubDate>Mon, 05 Oct 2020 23:00:00 +0800</pubDate>
      
      <guid>https://jiayee.net/2020/10/polling/</guid>
      <description>There were instances where users filled up a time-consuming form but could not submit it because of reCaptcha failure. Users ended up having to refresh and re-populate the form. That&amp;rsquo;s some harsh user experience. My team uses a forked version of angular-recaptcha. I located the controller, directive and template for the form. I attached a recursive $timeout at the controller and the directive, but as of now, I have not gotten them to work.</description>
    </item>
    
    <item>
      <title>Dynamic Tooltips</title>
      <link>https://jiayee.net/2020/09/dynamic-tooltips/</link>
      <pubDate>Fri, 25 Sep 2020 14:55:00 +0800</pubDate>
      
      <guid>https://jiayee.net/2020/09/dynamic-tooltips/</guid>
      <description>I had a tooltip for a switch which contained 2 lines of text. The first line of the tooltip shows how users can fill the textarea field nearby. The second line reminds users to meet certain prerequisites before filling the field. My GovTech OSS buddy suggested shortening the tooltip depending on user interaction.
At first, the tooltip looked like:
&amp;lt;i class=&amp;#34;...&amp;#34; uib-tooltip=&amp;#34;Here&amp;#39;s the one and only static tooltip!&amp;#34; tooltip-trigger=&amp;#34;&amp;#39;click mouseenter&amp;#39;&amp;#34; &amp;gt;&amp;lt;/i&amp;gt; uib-tooltip seems to come from UI Bootstrap.</description>
    </item>
    
    <item>
      <title>Intercepting Angular Data Binding</title>
      <link>https://jiayee.net/2020/09/intercepting-angular-data-binding/</link>
      <pubDate>Wed, 23 Sep 2020 21:40:00 +0800</pubDate>
      
      <guid>https://jiayee.net/2020/09/intercepting-angular-data-binding/</guid>
      <description>I have two form switches. Let&amp;rsquo;s call them A and B. I had to program them such that:
 When A is off, disable and switch B off. When A is on, disable and switch B off.  We can ignore backend logic because I programmed it such that if A is off, ignore B.
So, how did I solve this? I intercepted the data binding with a directive. This may not be the best solution, but it was so convenient and intuitive to me!</description>
    </item>
    
    <item>
      <title>Rendering newlines in HTML attributes</title>
      <link>https://jiayee.net/tweets/rendering-newlines-in-html-attributes/</link>
      <pubDate>Mon, 21 Sep 2020 22:41:00 +0800</pubDate>
      
      <guid>https://jiayee.net/tweets/rendering-newlines-in-html-attributes/</guid>
      <description>Doing
&amp;lt;textarea placeholder=&amp;#34;line1\nline2&amp;#34;&amp;gt; will not work, but doing
&amp;lt;textarea placeholder=&amp;#34;{{ somethingFromScope }}&amp;#34;&amp;gt; where somethingFromScope is line1\nline2 will work as expected!</description>
    </item>
    
    <item>
      <title>Style Fixes 1</title>
      <link>https://jiayee.net/2020/09/style-fixes-1/</link>
      <pubDate>Sun, 20 Sep 2020 16:26:00 +0800</pubDate>
      
      <guid>https://jiayee.net/2020/09/style-fixes-1/</guid>
      <description>I discovered there were some unexpected styles for &amp;lt;code&amp;gt; and &amp;lt;pre&amp;gt; in this site. This is due to Foundation&amp;rsquo;s default styles. The inline code style was fine, but the same style applied to code blocks (i.e. &amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;...&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;), and that was not fine. There was also insufficient margin and padding for the code blocks. I inspected the &amp;lt;code&amp;gt; elements. I found out that Foundation was the culprit. It has been styling the &amp;lt;code&amp;gt; elements on top of what Hugo has in store.</description>
    </item>
    
    <item>
      <title>First Lighthouse Report for Jiayee.net</title>
      <link>https://jiayee.net/2020/09/first-lighthouse-report-for-jiayee.net/</link>
      <pubDate>Sat, 19 Sep 2020 18:34:00 +0800</pubDate>
      
      <guid>https://jiayee.net/2020/09/first-lighthouse-report-for-jiayee.net/</guid>
      <description>I ran my first Lighthouse report on this site. There&amp;rsquo;s a bunch of improvements to make. As of now, I managed to resolve some of them. I put up the links to the before and after Lighthouse reports at the end of this post. Please feel free to take a look at them.
A summary of the improvements I made:
 Include lang attribute to the html element i.e. &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;.</description>
    </item>
    
    <item>
      <title>Debugging Angular</title>
      <link>https://jiayee.net/2020/09/debugging-angular/</link>
      <pubDate>Mon, 14 Sep 2020 21:29:00 +0800</pubDate>
      
      <guid>https://jiayee.net/2020/09/debugging-angular/</guid>
      <description>Something could&amp;rsquo;ve happened in the past 2 weeks while I focused on fixing my unit tests. It had been some time since I last did a local deployment. To my surprise, my local deployments in the recent days rendered a blank page with the following error in the JavaScript console:
Uncaught Error: [$injector:modulerr] Failed to instantiate module FormSG due to: Error: [$injector:modulerr] Failed to instantiate module forms due to: Error: [ng:areq] Argument &amp;#39;directiveFactory&amp;#39; is required My Google-fu was lacking.</description>
    </item>
    
  </channel>
</rss>